name: Release

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.validate.outputs.release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all tags
      - name: Determine version from package.json
        id: get-version
        run: echo "version=v`cat package.json | jq -r .version`" >> "$GITHUB_OUTPUT"
      - name: Check that version is valid and does not yet exist
        id: validate
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ steps.get-version.outputs.version }}"; then
            echo "Version ${{ steps.get-version.outputs.version }} exists; not releasing"
            echo "release=no" >> "$GITHUB_OUTPUT"
          else
            if [[ ${{ steps.get-version.outputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Version ${{ steps.get-version.outputs.version }} to be released!"
              echo "release=yes" >> "$GITHUB_OUTPUT"
            else
              echo "Version ${{ steps.get-version.outputs.version }} does not match expected pattern (e.g. v1.0.0); not releasing"
              echo "release=no" >> "$GITHUB_OUTPUT"
            fi
          fi
  release:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.release == 'yes'
    steps:
      - uses: actions/checkout@v4
      - name: Checkout temporary branch
        run: |
          git checkout -b release/${{ needs.prepare.outputs.version }}
      - name: Stamp version into publish action
        run: |
          sed -i s/@main/@${{ needs.prepare.outputs.version }}/g publish/action.yml
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          git commit -am "ðŸš€ ${{ needs.prepare.outputs.version }}"
      - name: Tag version
        run: |
          git tag ${{ needs.prepare.outputs.version }}
          git tag `cut -d "." -f -2 <<< ${{ needs.prepare.outputs.version }}` --force
          git tag `cut -d "." -f -1 <<< ${{ needs.prepare.outputs.version }}` --force
      - name: List tags
        run: |
          git tag -l
      # - name: Push tags
      #   run: |
      #     git push origin --tags --force
