name: publish
on:
  workflow_call:
    inputs:
      venue:
        description: The site or venue that this project is being submitted to
        required: true
        type: string
      kind:
        description: The kind of the submission
        required: true
        type: string
      monorepo:
        description: |
          Indicate that this repository contains multiple projects that should be published.

          For example, if you have multiple articles, or tutorials that should be previewed
          and submitted when there are changes in the repository.
        required: false
        default: false
        type: boolean
      path:
        description: |
          The root directory path(s) where the Curvenote CLI will be invoked.
          If `multiple` paths are being used, separate the `path` string with ','.
          The paths can also be glob-like patterns (but only one `*`), for example:

          ```yaml
          path: my/project
          path: my/paper, my/poster
          path: papers/*, posters/*
          ```

          The default path is the root of the repository.
        required: false
        default: '.'
        type: string
      enforceSingleFolder:
        description: |
          When true, an error will be raised if a pull-request is touching multiple
          different folders. This can either be `true` or a label string.
          Multiple labels can be added with comma-separated values.

          If labels are used to control this property, the pull request will only fail in
          PRs with these labels.

          This can be used in conjunction with the `previewLabel`, for example, if they
          are both `paper` then the PRs with those labels will be required to only make changes
          in a single folder and will not be previewed if that condition fails.
          However, you can add additional preview labels, e.g. `all-papers`, which will build
          previews for all papers, as the single folder condition is not enforced for that label.
        required: false
        default: 'false'
        type: string
      previewLabel:
        description: |
          A pull-request label that indicates the preview and checks should be run.
          Multiple labels can be added with comma-separated values.

          If no label is supplied, the preview will run on all PRs.
        required: false
        type: string
      submitLabel:
        description: |
          A pull-request label that indicates the branch should be turned into a submission.
          This will notify all curators of the Curvenote site.

          The submission identifiers will be written directly to the repository in a commit,
          and the submission will be available to be merged on the Curvenote platform.

          A submission will not happen unless both the `enforceSingleFolder` and `previewLabel`
          conditions are satisfied.
        required: false
        default: ready
        type: string
    secrets:
      GITHUB:
        description: GitHub API token (usually `env.GITHUB_TOKEN`)
        required: true
      CURVENOTE:
        description: Curvenote API token (usually `secrets.CURVENOTE_TOKEN`)
        required: true
permissions:
  contents: read
  pull-requests: write
jobs:
  strategy:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-strategy.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: build-strategy
        uses: curvenote/actions/strategy@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB }}
        with:
          monorepo: ${{ inputs.monorepo }}
          path: ${{ inputs.path }}
          enforceSingleFolder: ${{ inputs.enforceSingleFolder }}
          previewLabel: ${{ inputs.previewLabel }}
          submitLabel: ${{ inputs.submitLabel }}
  preview:
    needs: strategy
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.strategy.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: curvenote/actions/setup@main
      - uses: curvenote/actions/submit@main
        env:
          CURVENOTE_TOKEN: ${{ secrets.CURVENOTE }}
        with:
          id: ${{ matrix.id }}
          venue: ${{ inputs.venue }}
          kind: ${{ inputs.kind }}
          working-directory: ${{ matrix.working-directory }}
          draft: true
  check:
    needs: strategy
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.strategy.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: curvenote/actions/setup@main
        with:
          typst: false
          images: false
      - run: curvenote check
        working-directory: ${{ matrix.working-directory }}
  summary:
    needs:
      - strategy
      - preview
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB }}
    steps:
      - uses: curvenote/actions/submit-summary@main
        id: summary
        with:
          matrix: '${{ needs.strategy.outputs.matrix }}'
      - uses: curvenote/actions/upsert-comment@main
        with:
          comment: '${{ steps.summary.outputs.comment }}'
